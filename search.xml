<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker常用命令</title>
    <url>/waste-code/2023/05/20/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Docker常用使用命令"><a href="#Docker常用使用命令" class="headerlink" title="Docker常用使用命令"></a>Docker常用使用命令</h1><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul>
<li><code>docker version</code> docker版本</li>
<li><code>docker info</code> docker信息</li>
<li><code>docker --help</code> docker命令帮助</li>
</ul>
<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><ul>
<li>根据镜像新建并启动容器<code>docker run -d -p &#123;宿主机端口&#125;:&#123;容器端口&#125; -v &#123;宿主机文件路径&#125;:&#123;容器文件路径&#125; --name &#123;容器名别名&#125; &#123;镜像名&#125;:&#123;镜像版本&#125;</code><ul>
<li><code>-d</code>: 后台运行</li>
<li><code>-p</code>：端口映射</li>
<li><code>-v</code>：文件路径映射</li>
<li><code>--name</code> ：容器命名</li>
</ul>
</li>
<li>列出当前所有正在运行的容器<code>docker ps</code></li>
<li>列出所有容器<code>docker ps -a</code></li>
<li>启动容器<code>docker start &#123;容器id/容器名&#125;</code></li>
<li>重新启动容器<code>docker restart &#123;容器id/容器名&#125;</code></li>
<li>停止容器<code>docker stop &#123;容器id/容器名&#125;</code></li>
<li>强制停止容器<code>docker kill &#123;容器id/容器名&#125;</code></li>
<li>删除容器<code>docker rm &#123;容器id/容器名&#125;</code></li>
<li>强制删除容器<code>docker rm -f &#123;容器id/容器名&#125;</code></li>
<li>查看容器日志<code>docker logs -f -t --since --tail &#123;容器id/容器名&#125;</code><ul>
<li>eg : <code>docker logs -f -t --since=&quot;2022-02-28&quot; --tail=10 redis</code></li>
<li><code>-f</code>: 实时查看日志</li>
<li><code>-t</code> : 显示日志时间</li>
<li><code>--since=&quot;2022-02-28&quot;</code> ： 只输出2022-02-28及其之后的日志</li>
<li><code>--tail=10</code>：查看最后10条日志</li>
</ul>
</li>
<li>查看容器内运行的进程<code>docker top &#123;容器id/容器名&#125;</code></li>
<li>进入到容器内<code>docker exec -it &#123;容器id&#125; bash</code></li>
<li>将容器内文件拷贝到宿主机<code>docker cp &#123;容器id&#125;:&#123;容器内文件路径&#125; &#123;宿主机文件路径&#125;</code><ul>
<li>eg：<code>docker cp 2c003a469ae3:/usr/local/etc/redis/redis.conf /Users/hpc/DockerFileSystem/redis/conf/</code></li>
</ul>
</li>
</ul>
<h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><ul>
<li>查看镜像<code>docker images</code></li>
<li>列出本地所有镜像<code>docker images -a</code></li>
<li>拉取镜像<code>docker pull &#123;镜像名&#125;:&#123;镜像版本&#125;</code></li>
<li>删除镜像<code>docker rmi &#123;镜像名&#125;</code></li>
<li>强制删除镜像<code>docker rmi -f &#123;镜像名/镜像id&#125;</code></li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/waste-code/2023/05/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>多数据源切换</title>
    <url>/waste-code/2022/10/17/%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="数据源切换实现的3种方式"><a href="#数据源切换实现的3种方式" class="headerlink" title="数据源切换实现的3种方式"></a>数据源切换实现的3种方式</h2><ol>
<li>使用spring的AbstractRoutingDataSource抽象类</li>
<li>使用mybatis并重写SqlSessionFactory</li>
<li>使用dynamic-datasource-spring-boot-starter</li>
</ol>
<h2 id="使用AbstractRoutingDataSource抽象类"><a href="#使用AbstractRoutingDataSource抽象类" class="headerlink" title="使用AbstractRoutingDataSource抽象类"></a>使用AbstractRoutingDataSource抽象类</h2><p><strong>项目示例地址：</strong> <a class="link"   href="https://github.com/StudyRecording/dynamicDataSource/tree/main/extendClass" >https://github.com/StudyRecording/dynamicDataSource/tree/main/extendClass <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>  </p>
<p>通过继承AbstractRoutingDataSource抽象类并实现其中方法来更换数据员</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回数据源标识，</span></span><br><span class="line"><span class="comment">// 会在父类中的determineTargetDataSource方法中获取具体的数据源，然后进行数据源的链接</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">determineCurrentLookupKey</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在类进行初始化的时候执行，主要用来初始化类型的属性，</span></span><br><span class="line"><span class="comment">// 比如设置目标数据源，设置默认数据源等</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></div>
<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ol>
<li>通过代码直接切换<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">MultipleDataSource.name.set(DataSourceEnum.READ);</span><br></pre></td></tr></table></figure></div></li>
<li>定义注解，通过切面进行数据源切换<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSouceAop</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法的前置通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> point</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ds</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;@annotation(ds)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint point, DS ds)</span> &#123;</span><br><span class="line">        <span class="type">DataSourceEnum</span> <span class="variable">value</span> <span class="operator">=</span> ds.value();</span><br><span class="line">        MultipleDataSource.name.set(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>通过实现mybatis的插件进行数据源切换<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">        @Signature(type = Executor.class, method = &quot;query&quot;, args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;),</span></span><br><span class="line"><span class="meta">        @Signature(type = Executor.class, method = &quot;update&quot;, args = &#123;MappedStatement.class, Object.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourcePlugin</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Object[] args = invocation.getArgs();</span><br><span class="line">        <span class="type">MappedStatement</span> <span class="variable">ms</span> <span class="operator">=</span> (MappedStatement) args[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (ms.getSqlCommandType().equals(SqlCommandType.SELECT)) &#123;</span><br><span class="line">            MultipleDataSource.name.set(DataSourceEnum.READ);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            MultipleDataSource.name.set(DataSourceEnum.WRITE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">plugin</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target <span class="keyword">instanceof</span> Executor) &#123;</span><br><span class="line">            <span class="keyword">return</span> Plugin.wrap(target, <span class="built_in">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> target;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        Interceptor.<span class="built_in">super</span>.setProperties(properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="使用Mybatis并重写SqlSessionFactory实现"><a href="#使用Mybatis并重写SqlSessionFactory实现" class="headerlink" title="使用Mybatis并重写SqlSessionFactory实现"></a>使用Mybatis并重写SqlSessionFactory实现</h2><p>配置多个数据源就需要从写多个DataSourceTransactionManager、SqlSessionFactory、Mapper文件，且每个数据源与DataSourceTransactionManager、SqlSessionFactory和Mapper相互对应互相对应。</p>
<p><strong>项目示例地址：</strong> <a class="link"   href="https://github.com/StudyRecording/dynamicDataSource/tree/main/mybatisConfig" >https://github.com/StudyRecording/dynamicDataSource/tree/main/mybatisConfig <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> </p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;org.example.mapper.r&quot;, sqlSessionFactoryRef = &quot;rSqlSessionFactory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMybatisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">rSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SqlSessionFactoryBean</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sessionFactory.setDataSource(test());</span><br><span class="line">        <span class="comment">/*sessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver()</span></span><br><span class="line"><span class="comment">                .getResources(&quot;classpath:mapper/r/*.xml&quot;));*/</span></span><br><span class="line">        <span class="keyword">return</span> sessionFactory.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">rTransactionManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">dataSourceTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(test());</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TransactionTemplate <span class="title function_">rTransactionTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransactionTemplate</span>(rTransactionManager());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h3><ol>
<li>每个数据源利用Callable类声明相关的事务<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(DbTxConstants.DB2_TX)</span></span><br><span class="line"><span class="keyword">public</span> &lt;V&gt; V <span class="title function_">inTransaction</span><span class="params">(Callable&lt;V&gt; callable)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> callable.call();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>定义组合事务的类, 里面针对每个事务进行循环处理<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;V&gt; V <span class="title function_">inCombinedTx</span><span class="params">(Callable&lt;V&gt; callable, String[] transactions)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (callable == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 相当于循环 [RTransactionManager,wTransactionManager]</span></span><br><span class="line">    Callable&lt;V&gt; combined = Stream.of(transactions)</span><br><span class="line">            .filter(ele -&gt; !StringUtils.isEmpty(ele))</span><br><span class="line">            .distinct()</span><br><span class="line">            .reduce(callable, (r, tx) -&gt; &#123;</span><br><span class="line">                <span class="keyword">switch</span> (tx) &#123;</span><br><span class="line">                    <span class="keyword">case</span> DbTxConstants.DB1_TX:</span><br><span class="line">                        <span class="keyword">return</span> () -&gt; db1TxBroker.inTransaction(r);</span><br><span class="line">                    <span class="keyword">case</span> DbTxConstants.DB2_TX:</span><br><span class="line">                        <span class="keyword">return</span> () -&gt; db2TxBroker.inTransaction(r);</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, (r1, r2) -&gt; r2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> combined.call();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li>声明注解，在aop中判断注解并使用组合事务类进行处理<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;@annotation(multiTransactional)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">inMultiTransactions</span><span class="params">(ProceedingJoinPoint pjp, MultiTransactional multiTransactional)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> comboTransaction.inCombinedTx(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();       <span class="comment">//执行目标方法</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (RuntimeException) throwable;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, multiTransactional.value());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="使用dynamic-datasource-spring-boot-starter"><a href="#使用dynamic-datasource-spring-boot-starter" class="headerlink" title="使用dynamic-datasource-spring-boot-starter"></a>使用dynamic-datasource-spring-boot-starter</h2><ol>
<li>引用pom文件</li>
<li>使用@DS注解<br><strong>官方文档:</strong> <a class="link"   href="https://baomidou.com/pages/a61e1b/#%E6%96%87%E6%A1%A3-documentation" >https://baomidou.com/pages/a61e1b/#%E6%96%87%E6%A1%A3-documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ol>
<p><strong>项目示例:</strong> <a class="link"   href="https://github.com/StudyRecording/dynamicDataSource/tree/main/dynamicDataSourceMybatisPlus" >https://github.com/StudyRecording/dynamicDataSource/tree/main/dynamicDataSourceMybatisPlus <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>数据库</category>
        <category>实践</category>
        <category>分布式</category>
        <category>系统设计</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据源切换</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
</search>
